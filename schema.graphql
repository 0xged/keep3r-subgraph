# --------------------------------------------------------------------------
#                                    KLPs                                   
# --------------------------------------------------------------------------

type KLP @entity {
  "token0.id-token1.id"
  id: ID!
  "token"
  token: Token!
  "token0"
  token0: Token!
  "token1"
  token1: Token!
  "uniswap pool"
  pool: Bytes!
  "history of mints and burns"
  history: [KLPAction!]! @derivedFrom(field: "klp")
  "transaction"
  transaction: Transaction!
  "createdAtBlock"
  createdAtBlock: BigInt!
  "createdAtTimestamp"
  createdAtTimestamp: BigInt!
}

enum TYPE_OF_KLP_ACTION {
  MINT
  BURN
}

type KLPAction @entity {
  "tx.hash-index"
  id: ID!
  "user"
  user: Bytes!
  "klp"
  klp: KLP!
  "action"
  action: TYPE_OF_KLP_ACTION!
  "amount of token0 sent to create lp / received when burning lp"
  amount0: BigInt # Has to be optional because this data only comes on the mint callback
  "amount of token1 sent to create lp / received when burning lp"
  amount1: BigInt # Has to be optional because this data only comes on the mint callback
  "total minted liquidity / total burnt liquidity"
  liquidity: BigInt!
  "transaction"
  transaction: Transaction!
  "createdAtBlock"
  createdAtBlock: BigInt!
  "createdAtTimestamp"
  createdAtTimestamp: BigInt!
}

# --------------------------------------------------------------------------
#                               Jobs and works                              
# --------------------------------------------------------------------------


type Job @entity {
  "contract address"
  id: ID!
  "liquidities"
  liquidities: [JobLiquidity!]! @derivedFrom(field: "job")
  "liquidities ids"
  liquiditiesIds: [String!]!
  "credits"
  credits: [JobCredit!]! @derivedFrom(field: "job")
  "credits ids"
  creditsIds: [String!]!
  "jobs history"
  history: [JobAction!]! @derivedFrom(field: "job")
  "owner's address"
  # Optional parameter, since we might need to use the job before it was added / created
  owner: Bytes
  "Optional parameter, migrated to"
  migratedTo: Job
  "transaction"
  # Optional parameter, since we might need to use the job before it was added / created
  transaction: Transaction
  "createdAtBlock"
  # Optional parameter, since we might need to use the job before it was added / created
  createdAtBlock: BigInt
  "createdAtTimestamp"
  # Optional parameter, since we might need to use the job before it was added / created
  createdAtTimestamp: BigInt
}

type JobLiquidity @entity {
  "job.id-klp.id"
  id: ID!
  "job"
  job: Job!
  "klp"
  klp: KLP!
  "active amount of klps" 
  amount: BigInt!
  "amount of klps being unbonded"
  pendingUnbonds: BigInt!
  "when are the unbonded klps withdrawable"
  withdrawableAfter: BigInt!
}

type JobCredit @entity {
  "job.id-klp.id"
  id: ID!
  "job"
  job: Job!
  "token"
  token: Token!
  "amount"
  amount: BigInt!
}

# --------------------------------------------------------------------------
#                                 Job actions                               
# --------------------------------------------------------------------------

enum TYPE_OF_JOB_ACTION {
  ADD_LIQUIDITY
  UNBOND_LIQUIDITY
  WITHDRAWN_LIQUIDITY
  ADD_CREDITS
  REMOVE_CREDITS
  CONSUME_CREDITS
  WORK
}

interface JobAction {
  "job.id-transaction.hash-action"
  id: ID!
  "Job"
  job: Job!
  "Type of job action"
  action: TYPE_OF_JOB_ACTION!
  "transaction"
  transaction: Transaction!
  "createdAtBlock"
  createdAtBlock: BigInt!
  "createdAtTimestamp"
  createdAtTimestamp: BigInt!
}

type Work implements JobAction @entity {
  "job.id-transaction.hash"
  id: ID!
  "Type of job action"
  action: TYPE_OF_JOB_ACTION!
  "Job"
  job: Job!
  "Keeper"
  keeper: Keeper!
  "The address of the asset in which the keeper is paid"
  credit: Token!
  "The amount that has been paid out to the keeper in exchange for working the job"
  payment: BigInt!
  "Cumulative gas used (effective gas price * gas used)"
  cumulativeGasUsed: BigInt!
  "transaction"
  transaction: Transaction!
  "createdAtBlock"
  createdAtBlock: BigInt!
  "createdAtTimestamp"
  createdAtTimestamp: BigInt!
}

type LiquidityAction implements JobAction @entity {
  "job.id-transaction.hash"
  id: ID!
  "Type of job action"
  action: TYPE_OF_JOB_ACTION!
  "Job"
  job: Job!
  "Klp"
  klp: KLP!
  "Amount"
  amount: BigInt!
  "transaction"
  transaction: Transaction!
  "createdAtBlock"
  createdAtBlock: BigInt!
  "createdAtTimestamp"
  createdAtTimestamp: BigInt!
}

type CreditAction implements JobAction @entity {
  "job.id-transaction.hash"
  id: ID!
  "Type of job action"
  action: TYPE_OF_JOB_ACTION!
  "Job"
  job: Job!
  "Token"
  token: Token!
  "Amount"
  amount: BigInt!
  "transaction"
  transaction: Transaction!
  "createdAtBlock"
  createdAtBlock: BigInt!
  "createdAtTimestamp"
  createdAtTimestamp: BigInt!
}

# --------------------------------------------------------------------------
#                              Keepers and bonds                            
# --------------------------------------------------------------------------

type Keeper @entity {
  "Keeper's address"
  id: ID!
  "Bonds"
  bonds: [Bond!]! @derivedFrom(field: "keeper")
  "Work history"
  workHistory: [Work!]! @derivedFrom(field: "keeper")
}

enum TYPE_OF_BOND_ACTION {
  BOND
  ACTIVATE
  UNBOND
  WITHDRAW
}

type Bond @entity {
  "keeper.id-token.id"
  id: ID!
  "Keeper"
  keeper: Keeper!
  "Token being bonded"
  token: Token!
  "bonded"
  bonded: BigInt!
  "History"
  history: [BondAction!]! @derivedFrom(field: "bond")
}

type BondAction @entity {
  "tx.hash-bond.id"
  id: ID!
  "Bond"
  bond: Bond!
  "Type of action"
  action: TYPE_OF_BOND_ACTION!
  "amount"
  amount: BigInt!
  "transaction"
  transaction: Transaction!
  "createdAtBlock"
  createdAtBlock: BigInt!
  "createdAtTimestamp"
  createdAtTimestamp: BigInt!
}

# --------------------------------------------------------------------------
#                                    Misc                                   
# --------------------------------------------------------------------------

type Transaction @entity {
  "transaction.hash-transaction.index"
  id: ID!
  "The event name / call stacktrace"
  event: String!
  "The transaction sender"
  from: Bytes!
  "Transaction hash"
  hash: Bytes!
  "The transaction index"
  index: BigInt!
  "Address that received the transaction"
  to: Bytes
  "Ether value sent in the transaction"
  value: BigInt!
  "Effective gas price"
  gasPrice: BigInt!
  "Gas limit"
  gasLimit: BigInt!
  "Timestamp when the transaction was executed"
  timestamp: BigInt!
  "Block number"
  blockNumber: BigInt!
}

type Token @entity {
  "Token address"
  id: ID!
  "Name of the Token"
  name: String!
  "Symbol of the Token"
  symbol: String!
  "Decimals"
  decimals: Int!
  "Magnitude"
  magnitude: BigInt!
}

